# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import clientServer_pb2 as clientServer__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in clientServer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/clientServer.ClientServer/register',
                request_serializer=clientServer__pb2.registerRequest.SerializeToString,
                response_deserializer=clientServer__pb2.registerResponse.FromString,
                _registered_method=True)
        self.unregister = channel.unary_unary(
                '/clientServer.ClientServer/unregister',
                request_serializer=clientServer__pb2.unregisterRequest.SerializeToString,
                response_deserializer=clientServer__pb2.unregisterResponse.FromString,
                _registered_method=True)
        self.login = channel.unary_unary(
                '/clientServer.ClientServer/login',
                request_serializer=clientServer__pb2.loginRequest.SerializeToString,
                response_deserializer=clientServer__pb2.loginResponse.FromString,
                _registered_method=True)
        self.logout = channel.unary_unary(
                '/clientServer.ClientServer/logout',
                request_serializer=clientServer__pb2.logoutRequest.SerializeToString,
                response_deserializer=clientServer__pb2.logoutResponse.FromString,
                _registered_method=True)
        self.stayingAlive = channel.unary_unary(
                '/clientServer.ClientServer/stayingAlive',
                request_serializer=clientServer__pb2.stayRequest.SerializeToString,
                response_deserializer=clientServer__pb2.stayResponse.FromString,
                _registered_method=True)
        self.putFile = channel.unary_unary(
                '/clientServer.ClientServer/putFile',
                request_serializer=clientServer__pb2.putFileRequest.SerializeToString,
                response_deserializer=clientServer__pb2.putFileResponse.FromString,
                _registered_method=True)
        self.receivedFile = channel.unary_unary(
                '/clientServer.ClientServer/receivedFile',
                request_serializer=clientServer__pb2.receivedFileRequest.SerializeToString,
                response_deserializer=clientServer__pb2.receivedFileResponse.FromString,
                _registered_method=True)
        self.getFile = channel.unary_unary(
                '/clientServer.ClientServer/getFile',
                request_serializer=clientServer__pb2.getFileRequest.SerializeToString,
                response_deserializer=clientServer__pb2.getFileResponse.FromString,
                _registered_method=True)


class ClientServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stayingAlive(self, request, context):
        """user & password required
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def receivedFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=clientServer__pb2.registerRequest.FromString,
                    response_serializer=clientServer__pb2.registerResponse.SerializeToString,
            ),
            'unregister': grpc.unary_unary_rpc_method_handler(
                    servicer.unregister,
                    request_deserializer=clientServer__pb2.unregisterRequest.FromString,
                    response_serializer=clientServer__pb2.unregisterResponse.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=clientServer__pb2.loginRequest.FromString,
                    response_serializer=clientServer__pb2.loginResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=clientServer__pb2.logoutRequest.FromString,
                    response_serializer=clientServer__pb2.logoutResponse.SerializeToString,
            ),
            'stayingAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.stayingAlive,
                    request_deserializer=clientServer__pb2.stayRequest.FromString,
                    response_serializer=clientServer__pb2.stayResponse.SerializeToString,
            ),
            'putFile': grpc.unary_unary_rpc_method_handler(
                    servicer.putFile,
                    request_deserializer=clientServer__pb2.putFileRequest.FromString,
                    response_serializer=clientServer__pb2.putFileResponse.SerializeToString,
            ),
            'receivedFile': grpc.unary_unary_rpc_method_handler(
                    servicer.receivedFile,
                    request_deserializer=clientServer__pb2.receivedFileRequest.FromString,
                    response_serializer=clientServer__pb2.receivedFileResponse.SerializeToString,
            ),
            'getFile': grpc.unary_unary_rpc_method_handler(
                    servicer.getFile,
                    request_deserializer=clientServer__pb2.getFileRequest.FromString,
                    response_serializer=clientServer__pb2.getFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'clientServer.ClientServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('clientServer.ClientServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/register',
            clientServer__pb2.registerRequest.SerializeToString,
            clientServer__pb2.registerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/unregister',
            clientServer__pb2.unregisterRequest.SerializeToString,
            clientServer__pb2.unregisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/login',
            clientServer__pb2.loginRequest.SerializeToString,
            clientServer__pb2.loginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/logout',
            clientServer__pb2.logoutRequest.SerializeToString,
            clientServer__pb2.logoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stayingAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/stayingAlive',
            clientServer__pb2.stayRequest.SerializeToString,
            clientServer__pb2.stayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def putFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/putFile',
            clientServer__pb2.putFileRequest.SerializeToString,
            clientServer__pb2.putFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def receivedFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/receivedFile',
            clientServer__pb2.receivedFileRequest.SerializeToString,
            clientServer__pb2.receivedFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/clientServer.ClientServer/getFile',
            clientServer__pb2.getFileRequest.SerializeToString,
            clientServer__pb2.getFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
